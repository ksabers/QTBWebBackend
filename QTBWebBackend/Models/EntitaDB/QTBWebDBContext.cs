// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace QTBWebBackend.Models;

public partial class QTBWebDBContext : DbContext
{
    public QTBWebDBContext(DbContextOptions<QTBWebDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Aerei> Aerei { get; set; }

    public virtual DbSet<AereiPosseduti> AereiPosseduti { get; set; }

    public virtual DbSet<Aeroporti> Aeroporti { get; set; }

    public virtual DbSet<Login> Login { get; set; }

    public virtual DbSet<Manutenzioni> Manutenzioni { get; set; }

    public virtual DbSet<Persone> Persone { get; set; }

    public virtual DbSet<Ruoli> Ruoli { get; set; }

    public virtual DbSet<ScadenzeAerei> ScadenzeAerei { get; set; }

    public virtual DbSet<ScadenzePersone> ScadenzePersone { get; set; }

    public virtual DbSet<TipiAeroporti> TipiAeroporti { get; set; }

    public virtual DbSet<TipiManutenzioni> TipiManutenzioni { get; set; }

    public virtual DbSet<TipiScadenzeAerei> TipiScadenzeAerei { get; set; }

    public virtual DbSet<TipiScadenzePersone> TipiScadenzePersone { get; set; }

    public virtual DbSet<TipiVoli> TipiVoli { get; set; }

    public virtual DbSet<Voli> Voli { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Aerei>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Costruttore)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("costruttore");
            entity.Property(e => e.Marche)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("marche");
            entity.Property(e => e.MinutiPregressi).HasColumnName("minuti_pregressi");
            entity.Property(e => e.Modello)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("modello");
            entity.Property(e => e.PesoVuoto).HasColumnName("peso_vuoto");
        });

        modelBuilder.Entity<AereiPosseduti>(entity =>
        {
            entity.HasIndex(e => new { e.Persona, e.Aereo }, "IX_AereiPosseduti").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Aereo).HasColumnName("aereo");
            entity.Property(e => e.Persona).HasColumnName("persona");
            entity.Property(e => e.Quota).HasColumnName("quota");

            entity.HasOne(d => d.AereoNavigation).WithMany(p => p.AereiPosseduti)
                .HasForeignKey(d => d.Aereo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AereiPosseduti_Aerei");

            entity.HasOne(d => d.PersonaNavigation).WithMany(p => p.AereiPosseduti)
                .HasForeignKey(d => d.Persona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AereiPosseduti_Persone");
        });

        modelBuilder.Entity<Aeroporti>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Asfalto).HasColumnName("asfalto");
            entity.Property(e => e.Coordinate)
                .HasMaxLength(50)
                .HasColumnName("coordinate");
            entity.Property(e => e.Denominazione).HasColumnName("denominazione");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Iata)
                .HasMaxLength(3)
                .HasColumnName("IATA");
            entity.Property(e => e.Icao)
                .HasMaxLength(4)
                .HasColumnName("ICAO");
            entity.Property(e => e.Identificativo)
                .HasMaxLength(4)
                .HasColumnName("identificativo");
            entity.Property(e => e.Indirizzo)
                .HasMaxLength(100)
                .HasColumnName("indirizzo");
            entity.Property(e => e.Lunghezza).HasColumnName("lunghezza");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nome");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Qfu)
                .HasMaxLength(10)
                .HasColumnName("QFU");
            entity.Property(e => e.Qnh).HasColumnName("QNH");
            entity.Property(e => e.Radio)
                .HasMaxLength(50)
                .HasColumnName("radio");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .HasColumnName("telefono");
            entity.Property(e => e.TipoAeroporto).HasColumnName("tipo_aeroporto");
            entity.Property(e => e.Web)
                .HasMaxLength(50)
                .HasColumnName("web");

            entity.HasOne(d => d.TipoAeroportoNavigation).WithMany(p => p.Aeroporti)
                .HasForeignKey(d => d.TipoAeroporto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Aeroporti_TipiAeroporti");
        });

        modelBuilder.Entity<Login>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("password");
            entity.Property(e => e.Persona).HasColumnName("persona");
            entity.Property(e => e.Ruolo).HasColumnName("ruolo");

            entity.HasOne(d => d.PersonaNavigation).WithMany(p => p.Login)
                .HasForeignKey(d => d.Persona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Login_Persone");

            entity.HasOne(d => d.RuoloNavigation).WithMany(p => p.Login)
                .HasForeignKey(d => d.Ruolo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Login_Ruoli");
        });

        modelBuilder.Entity<Manutenzioni>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Aereo).HasColumnName("aereo");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasColumnName("descrizione");
            entity.Property(e => e.Ordinaria)
                .IsRequired()
                .HasDefaultValueSql("((1))")
                .HasColumnName("ordinaria");
            entity.Property(e => e.Persona).HasColumnName("persona");
            entity.Property(e => e.Tipo).HasColumnName("tipo");
            entity.Property(e => e.Volo).HasColumnName("volo");

            entity.HasOne(d => d.AereoNavigation).WithMany(p => p.Manutenzioni)
                .HasForeignKey(d => d.Aereo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Manutenzioni_Aerei");

            entity.HasOne(d => d.PersonaNavigation).WithMany(p => p.Manutenzioni)
                .HasForeignKey(d => d.Persona)
                .HasConstraintName("FK_Manutenzioni_Persone");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.Manutenzioni)
                .HasForeignKey(d => d.Tipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Manutenzioni_TipiManutenzioni");

            entity.HasOne(d => d.VoloNavigation).WithMany(p => p.Manutenzioni)
                .HasForeignKey(d => d.Volo)
                .HasConstraintName("FK_Manutenzioni_Voli");
        });

        modelBuilder.Entity<Persone>(entity =>
        {
            entity.HasIndex(e => e.Cognome, "IX_Persone");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.AeroportoBase).HasColumnName("aeroporto_base");
            entity.Property(e => e.Cap)
                .HasMaxLength(50)
                .HasColumnName("cap");
            entity.Property(e => e.Citta)
                .HasMaxLength(50)
                .HasColumnName("citta");
            entity.Property(e => e.CodiceFiscale)
                .HasMaxLength(20)
                .HasColumnName("codice_fiscale");
            entity.Property(e => e.Cognome)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("cognome");
            entity.Property(e => e.DataNascita)
                .HasColumnType("date")
                .HasColumnName("data_nascita");
            entity.Property(e => e.Indirizzo)
                .HasMaxLength(50)
                .HasColumnName("indirizzo");
            entity.Property(e => e.LuogoNascita)
                .HasMaxLength(50)
                .HasColumnName("luogo_nascita");
            entity.Property(e => e.MinutiPregressi).HasColumnName("minuti_pregressi");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nome");
            entity.Property(e => e.Pilota).HasColumnName("pilota");
            entity.Property(e => e.Telefono)
                .HasMaxLength(50)
                .HasColumnName("telefono");
            entity.Property(e => e.Tessera)
                .HasMaxLength(50)
                .HasColumnName("tessera");

            entity.HasOne(d => d.AeroportoBaseNavigation).WithMany(p => p.Persone)
                .HasForeignKey(d => d.AeroportoBase)
                .HasConstraintName("FK_Persone_Aeroporti");
        });

        modelBuilder.Entity<Ruoli>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<ScadenzeAerei>(entity =>
        {
            entity.HasIndex(e => e.Data, "IX_ScadenzeAerei").IsDescending();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Aereo).HasColumnName("aereo");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Minuti).HasColumnName("minuti");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Risolta).HasColumnName("risolta");
            entity.Property(e => e.TipoScadenza).HasColumnName("tipo_scadenza");

            entity.HasOne(d => d.AereoNavigation).WithMany(p => p.ScadenzeAerei)
                .HasForeignKey(d => d.Aereo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScadenzeAerei_Aerei");

            entity.HasOne(d => d.TipoScadenzaNavigation).WithMany(p => p.ScadenzeAerei)
                .HasForeignKey(d => d.TipoScadenza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScadenzeAerei_TipiScadenzeAerei");
        });

        modelBuilder.Entity<ScadenzePersone>(entity =>
        {
            entity.HasIndex(e => e.Data, "IX_ScadenzePersone").IsDescending();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Data)
                .HasColumnType("datetime")
                .HasColumnName("data");
            entity.Property(e => e.Minuti).HasColumnName("minuti");
            entity.Property(e => e.Note).HasColumnName("note");
            entity.Property(e => e.Persona).HasColumnName("persona");
            entity.Property(e => e.Risolta).HasColumnName("risolta");
            entity.Property(e => e.TipoScadenza).HasColumnName("tipo_scadenza");

            entity.HasOne(d => d.PersonaNavigation).WithMany(p => p.ScadenzePersone)
                .HasForeignKey(d => d.Persona)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScadenzePersone_Persone");

            entity.HasOne(d => d.TipoScadenzaNavigation).WithMany(p => p.ScadenzePersone)
                .HasForeignKey(d => d.TipoScadenza)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ScadenzePersone_TipiScadenzePersone");
        });

        modelBuilder.Entity<TipiAeroporti>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<TipiManutenzioni>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<TipiScadenzeAerei>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_TipiScadenze");

            entity.HasIndex(e => e.Descrizione, "IX_TipiScadenzeAerei").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<TipiScadenzePersone>(entity =>
        {
            entity.HasIndex(e => e.Descrizione, "IX_TipiScadenzePersone").IsUnique();

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<TipiVoli>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descrizione)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("descrizione");
        });

        modelBuilder.Entity<Voli>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Aereo).HasColumnName("aereo");
            entity.Property(e => e.AeroportoFine).HasColumnName("aeroporto_fine");
            entity.Property(e => e.AeroportoInizio).HasColumnName("aeroporto_inizio");
            entity.Property(e => e.Bagaglio).HasColumnName("bagaglio");
            entity.Property(e => e.CarburanteAggiuntoDx).HasColumnName("carburante_aggiunto_dx");
            entity.Property(e => e.CarburanteAggiuntoSx).HasColumnName("carburante_aggiunto_sx");
            entity.Property(e => e.CarburanteInizialeDx).HasColumnName("carburante_iniziale_dx");
            entity.Property(e => e.CarburanteInizialeSx).HasColumnName("carburante_iniziale_sx");
            entity.Property(e => e.Descrizione).HasColumnName("descrizione");
            entity.Property(e => e.Durata)
                .HasComputedColumnSql("(([orametro_ore_fine]*(60)+[orametro_minuti_fine])-([orametro_ore_inizio]*(60)+[orametro_minuti_inizio]))", true)
                .HasColumnName("durata");
            entity.Property(e => e.InCorso).HasColumnName("in_corso");
            entity.Property(e => e.Olio).HasColumnName("olio");
            entity.Property(e => e.OraFine)
                .HasColumnType("datetime")
                .HasColumnName("ora_fine");
            entity.Property(e => e.OraInizio)
                .HasComputedColumnSql("(dateadd(minute, -(([orametro_ore_fine]*(60)+[orametro_minuti_fine])-([orametro_ore_inizio]*(60)+[orametro_minuti_inizio])),[ora_fine]))", true)
                .HasColumnType("datetime")
                .HasColumnName("ora_inizio");
            entity.Property(e => e.OraLocaleAtterraggio)
                .HasMaxLength(5)
                .HasColumnName("ora_locale_atterraggio");
            entity.Property(e => e.OraLocaleDecollo)
                .HasMaxLength(5)
                .HasColumnName("ora_locale_decollo");
            entity.Property(e => e.OrametroMinutiFine).HasColumnName("orametro_minuti_fine");
            entity.Property(e => e.OrametroMinutiInizio).HasColumnName("orametro_minuti_inizio");
            entity.Property(e => e.OrametroOreFine).HasColumnName("orametro_ore_fine");
            entity.Property(e => e.OrametroOreInizio).HasColumnName("orametro_ore_inizio");
            entity.Property(e => e.Passeggero).HasColumnName("passeggero");
            entity.Property(e => e.PesoOccupanti).HasColumnName("peso_occupanti");
            entity.Property(e => e.Pilota).HasColumnName("pilota");
            entity.Property(e => e.Tipo).HasColumnName("tipo");

            entity.HasOne(d => d.AereoNavigation).WithMany(p => p.Voli)
                .HasForeignKey(d => d.Aereo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Voli_Aerei");

            entity.HasOne(d => d.AeroportoFineNavigation).WithMany(p => p.VoliAeroportoFineNavigation)
                .HasForeignKey(d => d.AeroportoFine)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Voli_Aeroporti1");

            entity.HasOne(d => d.AeroportoInizioNavigation).WithMany(p => p.VoliAeroportoInizioNavigation)
                .HasForeignKey(d => d.AeroportoInizio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Voli_Aeroporti");

            entity.HasOne(d => d.PasseggeroNavigation).WithMany(p => p.VoliPasseggeroNavigation)
                .HasForeignKey(d => d.Passeggero)
                .HasConstraintName("FK_Voli_Persone1");

            entity.HasOne(d => d.PilotaNavigation).WithMany(p => p.VoliPilotaNavigation)
                .HasForeignKey(d => d.Pilota)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Voli_Persone");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.Voli)
                .HasForeignKey(d => d.Tipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Voli_TipiVoli");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}